#!/usr/bin/env python3
import subprocess
import re
import logging
import time
import json
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading
from urllib.parse import parse_qs
import asyncio

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
# –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–∞—à–µ–π –¥–æ–º–∞—à–Ω–µ–π –≤–µ—Ä—Å–∏–∏
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ç–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_CHAT_ID = 981471707  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Chat ID

JAIL = "sshd"

# –ü–æ—Ä–æ–≥–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
THRESHOLDS = {
    'cpu': {'warning': 70, 'critical': 85, 'emergency': 95},
    'memory': {'warning': 70, 'critical': 85, 'emergency': 95},
    'disk': {'warning': 80, 'critical': 90, 'emergency': 95},
    'temperature': {'warning': 60, 'critical': 75, 'emergency': 85}
}

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFY_LOG_FILE = '/tmp/server_monitor_notify_log.json'

# –¢–∞–π–º–µ—Ä –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) - 30 –º–∏–Ω—É—Ç
NOTIFY_COOLDOWN = 1800

# –ü–æ—Ä—Ç –¥–ª—è webhook (–¥–ª—è Alertmanager)
WEBHOOK_PORT = 8080

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notify_log = {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def load_notify_log():
    global notify_log
    try:
        if os.path.exists(NOTIFY_LOG_FILE):
            with open(NOTIFY_LOG_FILE, 'r') as f:
                notify_log = json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def save_notify_log():
    try:
        with open(NOTIFY_LOG_FILE, 'w') as f:
            json.dump(notify_log, f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
def can_notify(alert_type):
    current_time = time.time()
    if alert_type in notify_log:
        last_time = notify_log[alert_type]
        if current_time - last_time < NOTIFY_COOLDOWN:
            return False
    return True

# –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def update_notify_time(alert_type):
    notify_log[alert_type] = time.time()
    save_notify_log()

# –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–≥–∏
def get_alert_level(value, thresholds):
    if value >= thresholds['emergency']:
        return 'emergency'
    elif value >= thresholds['critical']:
        return 'critical'
    elif value >= thresholds['warning']:
        return 'warning'
    return 'normal'

# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–≥–∏
def format_alert_level(level):
    levels = {
        'warning': 'üü°',
        'critical': 'üî¥',
        'emergency': 'üí•',
        'normal': 'üü¢'
    }
    return levels.get(level, 'üü¢')

# –°–æ–∑–¥–∞—ë–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
def create_progress_bar(percentage, width=10):
    """–°–æ–∑–¥–∞—ë—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    filled = int(width * percentage // 100)
    bar = '‚ñà' * filled + '‚ñë' * (width - filled)
    return f"[{bar}] {percentage:.1f}%"

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async def send_alert_async(context, alert_type, level, message):
    if can_notify(alert_type):
        alert_text = f"{format_alert_level(level)} {message}"
        try:
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=alert_text, parse_mode='Markdown')
            update_notify_time(alert_type)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {alert_type} - {level}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    else:
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {alert_type} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (cooldown)")

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è webhook)
def send_alert_sync(bot_app, alert_type, level, message):
    if can_notify(alert_type):
        alert_text = f"{format_alert_level(level)} {message}"
        try:
            # –ü–æ–ª—É—á–∞–µ–º event loop –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            try:
                loop = asyncio.get_running_loop()
            except RuntimeError:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            loop.run_until_complete(bot_app.bot.send_message(chat_id=ADMIN_CHAT_ID, text=alert_text, parse_mode='Markdown'))
            update_notify_time(alert_type)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {alert_type} - {level}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    else:
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {alert_type} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (cooldown)")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ª–µ—Ä—Ç–æ–≤ –æ—Ç Alertmanager
class AlertHandler(BaseHTTPRequestHandler):
    def __init__(self, bot_app, *args, **kwargs):
        self.bot_app = bot_app
        super().__init__(*args, **kwargs)
    
    def do_POST(self):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers['Content-Length'])
            # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            post_data = self.rfile.read(content_length)
            
            # –ü–∞—Ä—Å–∏–º JSON
            alert_data = json.loads(post_data)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∞–ª–µ—Ä—Ç: {alert_data}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç
            self.process_alert(alert_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b'OK')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            self.send_response(500)
            self.end_headers()
            self.wfile.write(b'Error')
    
    def process_alert(self, alert_data):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∞–ª–µ—Ä—Ç–∞
            alerts = alert_data.get('alerts', [])
            for alert in alerts:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–ª–µ—Ä—Ç–∞
                status = alert.get('status', 'unknown')
                labels = alert.get('labels', {})
                annotations = alert.get('annotations', {})
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç–∞
                alertname = labels.get('alertname', 'Unknown Alert')
                severity = labels.get('severity', 'unknown')
                summary = annotations.get('summary', 'No summary')
                description = annotations.get('description', 'No description')
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if status == 'firing':
                    emoji = "üö®"
                    status_text = "–°—Ä–∞–±–æ—Ç–∞–ª –∞–ª–µ—Ä—Ç"
                elif status == 'resolved':
                    emoji = "‚úÖ"
                    status_text = "–ê–ª–µ—Ä—Ç —Ä–∞–∑—Ä–µ—à–∏–ª—Å—è"
                else:
                    emoji = "‚ö†Ô∏è"
                    status_text = f"–°—Ç–∞—Ç—É—Å –∞–ª–µ—Ä—Ç–∞: {status}"
                
                message = f"{emoji} *{status_text}*\n\nüìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* {alertname}\n‚ö†Ô∏è *–£—Ä–æ–≤–µ–Ω—å:* {severity}\nüìã *–°–≤–æ–¥–∫–∞:* {summary}\nüìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
                send_alert_sync(self.bot_app, f"alert_{alertname}", severity, message)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç –≤ Telegram: {alertname}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")

# –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π bot_app
def make_handler(bot_app):
    def handler(*args, **kwargs):
        return AlertHandler(bot_app, *args, **kwargs)
    return handler

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
async def check_server_status(context):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
        cpu_result = subprocess.run(['uptime'], capture_output=True, text=True, check=True)
        cpu_line = cpu_result.stdout.strip()
        cpu_match = re.search(r'load average: ([\d.]+), ([\d.]+), ([\d.]+)', cpu_line)
        if cpu_match:
            load_1min, load_5min, load_15min = map(float, cpu_match.groups())
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä CPU
            cpu_cores_result = subprocess.run(['nproc'], capture_output=True, text=True, check=True)
            cpu_cores = int(cpu_cores_result.stdout.strip())
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ (1 –º–∏–Ω—É—Ç–∞)
            cpu_percent = (load_1min / cpu_cores) * 100
            level = get_alert_level(cpu_percent, THRESHOLDS['cpu'])
            if level != 'normal':
                message = f"üß† *–ó–∞–≥—Ä—É–∑–∫–∞ CPU*: `{cpu_percent:.1f}%`\n1 –º–∏–Ω: `{load_1min}`, 5 –º–∏–Ω: `{load_5min}`, 15 –º–∏–Ω: `{load_15min}`, –Ø–¥–µ—Ä: `{cpu_cores}`"
                await send_alert_async(context, 'cpu', level, message)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        mem_result = subprocess.run(['free'], capture_output=True, text=True, check=True)
        mem_lines = mem_result.stdout.strip().split('\n')
        if len(mem_lines) >= 2:
            mem_info = mem_lines[1].split()
            if len(mem_info) >= 7:
                mem_total = int(mem_info[1])
                mem_used = int(mem_info[2])
                mem_percent = (mem_used / mem_total) * 100
                level = get_alert_level(mem_percent, THRESHOLDS['memory'])
                if level != 'normal':
                    message = f"üíæ *–ü–∞–º—è—Ç—å*: `{mem_percent:.1f}%` –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: `{mem_used//1024//1024}MB` –∏–∑ `{mem_total//1024//1024}MB`"
                    await send_alert_async(context, 'memory', level, message)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞
        disk_result = subprocess.run(['df', '/'], capture_output=True, text=True, check=True)
        disk_lines = disk_result.stdout.strip().split('\n')
        if len(disk_lines) >= 2:
            disk_info = disk_lines[1].split()
            if len(disk_info) >= 5:
                disk_percent_str = disk_info[4].replace('%', '')
                disk_percent = int(disk_percent_str)
                level = get_alert_level(disk_percent, THRESHOLDS['disk'])
                if level != 'normal':
                    message = f"üíø *–î–∏—Å–∫*: `{disk_percent}%` –∑–∞–Ω—è—Ç–æ\n–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: `{disk_info[0]}`\n–¢–æ—á–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: `{disk_info[5]}`"
                    await send_alert_async(context, 'disk', level, message)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        try:
            temp_result = subprocess.run(['cat', '/sys/class/thermal/thermal_zone0/temp'], 
                                       capture_output=True, text=True, check=True)
            temp_raw = int(temp_result.stdout.strip())
            temp_celsius = temp_raw / 1000
            level = get_alert_level(temp_celsius, THRESHOLDS['temperature'])
            if level != 'normal':
                message = f"üå° *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞*: `{temp_celsius:.1f}¬∞C`"
                await send_alert_async(context, 'temperature', level, message)
        except:
            pass  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def restricted(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_chat.id != ADMIN_CHAT_ID:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
        return await func(update, context)
    return wrapper

# /start
@restricted
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Home Server Bot.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "  /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "  /status ‚Äî –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ *(—Å –∫–Ω–æ–ø–∫–∞–º–∏)*\n"
        "  /check ‚Äî —Å—Ç–∞—Ç—É—Å SSH\n"
        "  /who ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏\n"
        "  /ban <ip> ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP\n"
        "  /unban <ip> ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP\n"
        "  /banned ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP\n"
        "  /jailstatus ‚Äî —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ç—é—Ä–µ–º\n"
        "  /cpu ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ CPU\n"
        "  /temp ‚Äî —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã\n"
        "  /disk ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞\n"
        "  /mem ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏\n"
        "  /top ‚Äî —Ç–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
        "  /monitor ‚Äî –≤–∫–ª/–≤—ã–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
    )

# /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞
@restricted
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitor_status = "‚úÖ –í–ö–õ–Æ–ß–ï–ù" if context.bot_data.get('monitor_job') else "‚ùå –í–´–ö–õ–Æ–ß–ï–ù"
    
    help_text = f"""
üîß **Fail2Ban ‚Äî –°–ø—Ä–∞–≤–∫–∞ –∏ –∫–æ–º–∞–Ω–¥—ã**

üìå –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:

  –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:
`sudo fail2ban-client status sshd`

  –í—Ä—É—á–Ω—É—é –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP:
`sudo fail2ban-client set sshd banip 1.2.3.4`

  –í—Ä—É—á–Ω—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP:
`sudo fail2ban-client set sshd unbanip 1.2.3.4`

  –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—É:
`sudo systemctl restart fail2ban`


üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
  `/etc/fail2ban/jail.local` ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥
  `/etc/fail2ban/action.d/telegram.conf` ‚Äî –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è Telegram
  `/usr/local/bin/fail2ban-telegram-alert.sh` ‚Äî —Å–∫—Ä–∏–ø—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  `/var/log/fail2ban.log` ‚Äî –ª–æ–≥–∏

ü§ñ **–ö–æ–º–∞–Ω–¥—ã Telegram-–±–æ—Ç–∞:**

`/status` ‚Äî –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ *(—Å –∫–Ω–æ–ø–∫–∞–º–∏)*
`/check` ‚Äî —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã SSH  
`/who` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ SSH-—Å–µ—Å—Å–∏–∏  
`/ban <ip>` ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP  
`/unban <ip>` ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP  
`/banned` ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP  
`/jailstatus` ‚Äî —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ç—é—Ä–µ–º  
`/cpu` ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ CPU  
`/temp` ‚Äî —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã  
`/disk` ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞  
`/mem` ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏  
`/top` ‚Äî —Ç–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤  
`/monitor` ‚Äî –≤–∫–ª/–≤—ã–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ *(—Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {monitor_status})*  
`/help` ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° –°–æ–≤–µ—Ç: –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª.  
–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥–µ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

# /status ‚Äî –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
@restricted
async def server_status_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
    try:
        # CPU
        cpu_result = subprocess.run(['uptime'], capture_output=True, text=True, check=True)
        cpu_line = cpu_result.stdout.strip()
        cpu_match = re.search(r'load average: ([\d.]+), ([\d.]+), ([\d.]+)', cpu_line)
        if cpu_match:
            load_1min = float(cpu_match.group(1))
            cpu_cores_result = subprocess.run(['nproc'], capture_output=True, text=True, check=True)
            cpu_cores = int(cpu_cores_result.stdout.strip())
            cpu_percent = (load_1min / cpu_cores) * 100
        else:
            cpu_percent = 0

        # Memory
        mem_result = subprocess.run(['free'], capture_output=True, text=True, check=True)
        mem_lines = mem_result.stdout.strip().split('\n')
        if len(mem_lines) >= 2:
            mem_info = mem_lines[1].split()
            if len(mem_info) >= 7:
                mem_total = int(mem_info[1])
                mem_used = int(mem_info[2])
                mem_percent = (mem_used / mem_total) * 100
            else:
                mem_percent = 0
        else:
            mem_percent = 0

        # Disk
        disk_result = subprocess.run(['df', '/'], capture_output=True, text=True, check=True)
        disk_lines = disk_result.stdout.strip().split('\n')
        if len(disk_lines) >= 2:
            disk_info = disk_lines[1].split()
            if len(disk_info) >= 5:
                disk_percent_str = disk_info[4].replace('%', '')
                disk_percent = int(disk_percent_str)
            else:
                disk_percent = 0
        else:
            disk_percent = 0

        # Temperature
        try:
            temp_result = subprocess.run(['cat', '/sys/class/thermal/thermal_zone0/temp'], 
                                       capture_output=True, text=True, check=True)
            temp_raw = int(temp_result.stdout.strip())
            temp_celsius = temp_raw / 1000
        except:
            temp_celsius = 0

        # –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitor_status = "‚úÖ –í–ö–õ" if context.bot_data.get('monitor_job') else "‚ùå –í–´–ö–õ"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ—à–∏–±–∫–∏
        status_text = (
            f"üìä *–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞*\n\n"
            f"üß† CPU: {create_progress_bar(cpu_percent)}\n"
            f"üíæ –ü–∞–º—è—Ç—å: {create_progress_bar(mem_percent)}\n"
            f"üíø –î–∏—Å–∫: {create_progress_bar(disk_percent)}\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: `{temp_celsius:.1f}¬∞C`\n"
            f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: `{monitor_status}`\n"
            f"üïê –í—Ä–µ–º—è: `{time.strftime('%H:%M:%S')}`"
        )

        # –ö–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üß† –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ CPU", callback_data='detail_cpu')],
            [InlineKeyboardButton("üíæ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–∞–º—è—Ç–∏", callback_data='detail_mem')],
            [InlineKeyboardButton("üíø –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –¥–∏—Å–∫–µ", callback_data='detail_disk')],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='refresh_status')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.message:
            await update.message.reply_text(status_text, parse_mode='Markdown', reply_markup=reply_markup)
        elif update.callback_query:
            # –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏
            await update.callback_query.edit_message_text(text=status_text, parse_mode='Markdown', reply_markup=reply_markup)
            await update.callback_query.answer()

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: `{e}`"
        if update.message:
            await update.message.reply_text(error_msg, parse_mode='Markdown')
        elif update.callback_query:
            await update.callback_query.edit_message_text(text=error_msg, parse_mode='Markdown')
            await update.callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
@restricted
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer() # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback'–∞

    data = query.data

    if data == 'refresh_status':
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç—É—Å–∞
        await server_status_menu(update, context)
        
    elif data == 'detail_cpu':
        # –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ CPU
        try:
            # Uptime
            uptime_result = subprocess.run(['uptime', '-p'], capture_output=True, text=True, check=True)
            uptime = uptime_result.stdout.strip()
            
            # CPU Load
            cpu_result = subprocess.run(['uptime'], capture_output=True, text=True, check=True)
            cpu_line = cpu_result.stdout.strip()
            cpu_match = re.search(r'load average: ([\d.]+), ([\d.]+), ([\d.]+)', cpu_line)
            if cpu_match:
                cpu_load = f"{cpu_match.group(1)}, {cpu_match.group(2)}, {cpu_match.group(3)}"
            else:
                cpu_load = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å"
            
            # CPU Cores
            cpu_cores_result = subprocess.run(['nproc'], capture_output=True, text=True, check=True)
            cpu_cores = cpu_cores_result.stdout.strip()
            
            detail_text = (
                f"üß† *–ó–∞–≥—Ä—É–∑–∫–∞ CPU*\n"
                f"‚è± –ê–ø—Ç–∞–π–º: `{uptime.replace('up ', '')}`\n"
                f"üìà Load Average: `{cpu_load}`\n"
                f"üî¢ –Ø–¥–µ—Ä: `{cpu_cores}`"
            )
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            back_button = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_status')]]
            reply_markup = InlineKeyboardMarkup(back_button)
            
            await query.edit_message_text(text=detail_text, parse_mode='Markdown', reply_markup=reply_markup)
        except Exception as e:
            await query.edit_message_text(text=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö CPU: `{e}`", parse_mode='Markdown')
            
    elif data == 'detail_mem':
        # –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –ø–∞–º—è—Ç–∏
        try:
            result = subprocess.run(['free', '-h'], capture_output=True, text=True, check=True)
            lines = result.stdout.strip().split('\n')
            
            if len(lines) >= 3:
                mem_line = lines[1].split()
                swap_line = lines[2].split()
                
                mem_info = f"""üß† *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏*

*RAM:*
‚îú‚îÄ –í—Å–µ–≥–æ: `{mem_line[1]}`
‚îú‚îÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: `{mem_line[2]}`
‚îú‚îÄ –°–≤–æ–±–æ–¥–Ω–æ: `{mem_line[3]}`
‚îî‚îÄ –î–æ—Å—Ç—É–ø–Ω–æ: `{mem_line[6] if len(mem_line) > 6 else 'N/A'}`

*Swap:*
‚îú‚îÄ –í—Å–µ–≥–æ: `{swap_line[1]}`
‚îú‚îÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: `{swap_line[2]}`
‚îî‚îÄ –°–≤–æ–±–æ–¥–Ω–æ: `{swap_line[3]}`"""
                
                # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                back_button = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_status')]]
                reply_markup = InlineKeyboardMarkup(back_button)
                
                await query.edit_message_text(text=mem_info, parse_mode='Markdown', reply_markup=reply_markup)
            else:
                await query.edit_message_text(text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏.", parse_mode='Markdown')
        except Exception as e:
            await query.edit_message_text(text=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏: `{e}`", parse_mode='Markdown')
            
    elif data == 'detail_disk':
        # –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –¥–∏—Å–∫–µ
        try:
            result = subprocess.run(['df', '-h'], capture_output=True, text=True, check=True)
            lines = result.stdout.strip().split('\n')
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
            filtered_lines = [line for line in lines if line.startswith(('/dev/', 'tmpfs'))]
            
            if filtered_lines:
                disk_info = "üíø *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞*\n```\n"
                disk_info += f"{'–§–°':<15} {'–†–∞–∑–º–µ—Ä':<8} {'–ò—Å–ø.':<8} {'–î–æ—Å—Ç.':<8} {'–ò—Å–ø.%':<6} {'–¢–æ—á–∫–∞ –º–æ–Ω—Ç.'}\n"
                disk_info += "-" * 65 + "\n"
                
                for line in filtered_lines:
                    parts = line.split()
                    if len(parts) >= 6:
                        fs = parts[0][:14]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                        size = parts[1]
                        used = parts[2]
                        avail = parts[3]
                        perc = parts[4]
                        mount = parts[5][:15] # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        disk_info += f"{fs:<15} {size:<8} {used:<8} {avail:<8} {perc:<6} {mount}\n"
                
                disk_info += "```"
                
                # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                back_button = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_status')]]
                reply_markup = InlineKeyboardMarkup(back_button)
                
                await query.edit_message_text(text=disk_info, parse_mode='Markdown', reply_markup=reply_markup)
            else:
                await query.edit_message_text(text="‚úÖ –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö.", parse_mode='Markdown')
        except Exception as e:
            await query.edit_message_text(text=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö: `{e}`", parse_mode='Markdown')
            
    elif data == 'back_to_status':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é —Å—Ç–∞—Ç—É—Å–∞
        await server_status_menu(update, context)

# /check ‚Äî —Å—Ç–∞—Ç—É—Å fail2ban
@restricted
async def check_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        result = subprocess.run(
            ['sudo', 'fail2ban-client', 'status', JAIL],
            capture_output=True,
            text=True,
            check=True
        )
        await update.message.reply_text(f"```\n{result.stdout}\n```", parse_mode='Markdown')
    except subprocess.CalledProcessError as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: `{e.stderr}`")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: `{e}`")

# /who ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ SSH-—Å–µ—Å—Å–∏–∏
@restricted
async def who(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        result = subprocess.run(['who'], capture_output=True, text=True, check=True)
        sessions = result.stdout.strip()
        if sessions:
            await update.message.reply_text(f"üë• *–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:*\n```\n{sessions}\n```", parse_mode='Markdown')
        else:
            await update.message.reply_text("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: `{e}`")

# /ban <ip> ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP
@restricted
async def ban_ip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ IP –∞–¥—Ä–µ—Å: `/ban 1.2.3.4`", parse_mode='Markdown')
        return
    
    ip = context.args[0]
    if not is_valid_ip(ip):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP –∞–¥—Ä–µ—Å–∞.")
        return

    try:
        result = subprocess.run(
            ['sudo', 'fail2ban-client', 'set', JAIL, 'banip', ip],
            capture_output=True,
            text=True,
            check=True
        )
        await update.message.reply_text(f"‚úÖ IP `{ip}` —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", parse_mode='Markdown')
    except subprocess.CalledProcessError as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: `{e.stderr}`")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: `{e}`")

# /unban <ip> ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP
@restricted
async def unban_ip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ IP –∞–¥—Ä–µ—Å: `/unban 1.2.3.4`", parse_mode='Markdown')
        return
    
    ip = context.args[0]
    if not is_valid_ip(ip):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP –∞–¥—Ä–µ—Å–∞.")
        return

    try:
        result = subprocess.run(
            ['sudo', 'fail2ban-client', 'set', JAIL, 'unbanip', ip],
            capture_output=True,
            text=True,
            check=True
        )
        await update.message.reply_text(f"‚úÖ IP `{ip}` —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", parse_mode='Markdown')
    except subprocess.CalledProcessError as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: `{e.stderr}`")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: `{e}`")

# /banned ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP
@restricted
async def banned_ips(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        result = subprocess.run(
            ['sudo', 'fail2ban-client', 'get', JAIL, 'banned'],
            capture_output=True,
            text=True,
            check=True
        )
        banned = result.stdout.strip()
        if banned:
            await update.message.reply_text(f"üö´ *–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP:*\n```\n{banned}\n```", parse_mode='Markdown')
        else:
            await update.message.reply_text("‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP.")
    except subprocess.CalledProcessError as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: `{e.stderr}`")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: `{e}`")

# /jailstatus ‚Äî —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ç—é—Ä–µ–º
@restricted
async def jail_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        result = subprocess.run(
            ['sudo', 'fail2ban-client', 'status'],
            capture_output=True,
            text=True,
            check=True
        )
        await update.message.reply_text(f"```\n{result.stdout}\n```", parse_mode='Markdown')
    except subprocess.CalledProcessError as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: `{e.stderr}`")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: `{e}`")

# /cpu ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ CPU (—É–ª—É—á—à–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
@restricted
async def cpu_load(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # CPU Load
        cpu_result = subprocess.run(['uptime'], capture_output=True, text=True, check=True)
        cpu_line = cpu_result.stdout.strip()
        cpu_match = re.search(r'load average: ([\d.]+), ([\d.]+), ([\d.]+)', cpu_line)
        if cpu_match:
            load_1min, load_5min, load_15min = map(float, cpu_match.groups())
        else:
            load_1min, load_5min, load_15min = "N/A", "N/A", "N/A"
        
        # CPU Cores
        cpu_cores_result = subprocess.run(['nproc'], capture_output=True, text=True, check=True)
        cpu_cores = cpu_cores_result.stdout.strip()
        
        cpu_text = (
            f"üß† *–ó–∞–≥—Ä—É–∑–∫–∞ CPU*\n"
            f"üìà Load Average: `{load_1min}, {load_5min}, {load_15min}`\n"
            f"üî¢ –Ø–¥–µ—Ä: `{cpu_cores}`"
        )
        await update.message.reply_text(cpu_text, parse_mode='Markdown')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ CPU: `{e}`")

# /temp ‚Äî —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
@restricted
async def temperature(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        temp = "–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ"
        temp_source = "system"
        
        try:
            # –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±
            temp_result = subprocess.run(['cat', '/sys/class/thermal/thermal_zone0/temp'], 
                                       capture_output=True, text=True, check=True)
            temp_raw = int(temp_result.stdout.strip())
            temp = f"{temp_raw/1000:.1f}¬∞C"
        except:
            try:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ sensors
                temp_result = subprocess.run(['sensors'], capture_output=True, text=True, check=True)
                temp_lines = temp_result.stdout.strip().split('\n')
                temp_info = ""
                for line in temp_lines:
                    if 'Core' in line or 'Tctl' in line or 'Package id' in line or 'temp' in line.lower():
                        temp_info += line + "\n"
                if temp_info:
                    temp = f"```\n{temp_info}\n```"
                    temp_source = "sensors"
                else:
                    raise Exception("No temperature data found")
            except:
                temp = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É"
        
        if temp_source == "system":
            temp_text = f"üå° *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã:*\n\n`{temp}`"
        else:
            temp_text = f"üå° *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã (sensors):*\n\n{temp}"
            
        await update.message.reply_text(temp_text, parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: `{e}`")

# /disk ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
@restricted
async def disk_usage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        result = subprocess.run(['df', '-h'], capture_output=True, text=True, check=True)
        lines = result.stdout.strip().split('\n')
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã (–∏—Å–∫–ª—é—á–∞–µ–º tmpfs –∏ —Ç.–ø.)
        filtered_lines = [line for line in lines if line.startswith(('/dev/', 'tmpfs'))]
        
        if filtered_lines:
            disk_info = "üíø *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:*\n```\n"
            disk_info += f"{'–§–°':<15} {'–†–∞–∑–º–µ—Ä':<8} {'–ò—Å–ø.':<8} {'–î–æ—Å—Ç.':<8} {'–ò—Å–ø.%':<6} {'–¢–æ—á–∫–∞ –º–æ–Ω—Ç.'}\n"
            disk_info += "-" * 65 + "\n"
            
            for line in filtered_lines:
                parts = line.split()
                if len(parts) >= 6:
                    fs = parts[0][:14]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                    size = parts[1]
                    used = parts[2]
                    avail = parts[3]
                    perc = parts[4]
                    mount = parts[5][:15] # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    disk_info += f"{fs:<15} {size:<8} {used:<8} {avail:<8} {perc:<6} {mount}\n"
            
            disk_info += "```"
            await update.message.reply_text(disk_info, parse_mode='Markdown')
        else:
            await update.message.reply_text("‚úÖ –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö: `{e}`")

# /mem ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
@restricted
async def memory_usage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        result = subprocess.run(['free', '-h'], capture_output=True, text=True, check=True)
        lines = result.stdout.strip().split('\n')
        
        if len(lines) >= 3:
            mem_line = lines[1].split()
            swap_line = lines[2].split()
            
            mem_info = f"""
üß† *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:*

*RAM:*
‚îú‚îÄ –í—Å–µ–≥–æ: `{mem_line[1]}`
‚îú‚îÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: `{mem_line[2]}`
‚îú‚îÄ –°–≤–æ–±–æ–¥–Ω–æ: `{mem_line[3]}`
‚îî‚îÄ –î–æ—Å—Ç—É–ø–Ω–æ: `{mem_line[6] if len(mem_line) > 6 else 'N/A'}`

*Swap:*
‚îú‚îÄ –í—Å–µ–≥–æ: `{swap_line[1]}`
‚îú‚îÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: `{swap_line[2]}`
‚îî‚îÄ –°–≤–æ–±–æ–¥–Ω–æ: `{swap_line[3]}`"""
            await update.message.reply_text(mem_info, parse_mode='Markdown')
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏: `{e}`")

# /top ‚Äî —Ç–æ–ø 20 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
@restricted
async def top_processes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        result = subprocess.run(['top', '-b', '-n', '1'], capture_output=True, text=True, check=True)
        lines = result.stdout.strip().split('\n')
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        header_index = -1
        for i, line in enumerate(lines):
            if 'PID' in line and 'USER' in line and 'CPU' in line:
                header_index = i
                break
        
        if header_index != -1:
            # –ë–µ—Ä–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–ª–µ–¥—É—é—â–∏–µ 20 —Å—Ç—Ä–æ–∫
            process_lines = lines[header_index:header_index+21]
            top_info = "üî• *–¢–æ–ø 20 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:*\n```\n"
            top_info += "\n".join(process_lines)
            top_info += "\n```"
            await update.message.reply_text(top_info, parse_mode='Markdown')
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 25 —Å—Ç—Ä–æ–∫
            top_info = "üî• *–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:*\n```\n"
            top_info += "\n".join(lines[:25])
            top_info += "\n```"
            await update.message.reply_text(top_info, parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: `{e}`")

# /monitor ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
@restricted
async def monitor_control(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ job_queue
    if not hasattr(context, 'job_queue') or not context.job_queue:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: Job queue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", parse_mode='Markdown')
        return
    
    if not context.bot_data.get('monitor_job'):
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        try:
            monitor_job = context.job_queue.run_repeating(
                check_server_status, 
                interval=60,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                first=10
            )
            context.bot_data['monitor_job'] = monitor_job
            await update.message.reply_text("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞ *–≤–∫–ª—é—á–µ–Ω*\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.", parse_mode='Markdown')
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: `{e}`")
    else:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitor_job = context.bot_data['monitor_job']
        if monitor_job:
            monitor_job.schedule_removal()
        context.bot_data['monitor_job'] = None
        await update.message.reply_text("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞ *–≤—ã–∫–ª—é—á–µ–Ω*", parse_mode='Markdown')

# –í–∞–ª–∏–¥–∞—Ü–∏—è IP
def is_valid_ip(ip):
    pattern = r'^(\d{1,3}\.){3}\d{1,3}$'
    if re.match(pattern, ip):
        parts = ip.split('.')
        return all(0 <= int(part) <= 255 for part in parts)
    return False

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    load_notify_log()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(BOT_TOKEN).build()
    
    print("‚úÖ Job queue –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

    # –•—ç–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("status", server_status_menu)) # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
    app.add_handler(CommandHandler("check", check_status))
    app.add_handler(CommandHandler("who", who))
    app.add_handler(CommandHandler("ban", ban_ip))
    app.add_handler(CommandHandler("unban", unban_ip))
    app.add_handler(CommandHandler("banned", banned_ips))
    app.add_handler(CommandHandler("jailstatus", jail_status))
    app.add_handler(CommandHandler("cpu", cpu_load))
    app.add_handler(CommandHandler("temp", temperature))
    app.add_handler(CommandHandler("disk", disk_usage))
    app.add_handler(CommandHandler("mem", memory_usage))
    app.add_handler(CommandHandler("top", top_processes))
    app.add_handler(CommandHandler("monitor", monitor_control))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫ webhook-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    handler = make_handler(app)
    server = HTTPServer(('', WEBHOOK_PORT), handler)
    webhook_thread = threading.Thread(target=server.serve_forever, daemon=True)
    webhook_thread.start()
    logger.info(f"Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {WEBHOOK_PORT}")
    
    logger.info("Home Server Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    print("‚úÖ Home Server Bot –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
    app.run_polling()
